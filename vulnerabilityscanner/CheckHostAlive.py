import socket
import time
import threading
import queue


class CheckHostAlive:

    @staticmethod
    def createSocket():
        # creates a new socket using the given address family.
        try:
            socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            #print("Socket successfully created")
        except socket.error as err:
            print("socket creation failed with error %s" % err)

        # setting up the default timeout in seconds for new socket object
        socket.setdefaulttimeout(1)
        return socket_obj

    @staticmethod
    def alive(host, socket_obj, port):
        result = 1

        # returns 0 if connection succeeds else raises error
        try:
            result = socket_obj.connect_ex((host, port))  # address and port in the tuple format

        except socket.error as err:
            print("Error is %s for port %d" % (err, port))
        return result

    @staticmethod
    def closeSocket(obj):
        # closes te object
        obj.close()

    @staticmethod
    def checkAlive(host, port, que):
        socket_obj = CheckHostAlive.createSocket()
        result = CheckHostAlive.alive(host, socket_obj, port)
        CheckHostAlive.closeSocket(socket_obj)
        #print("port is %d and result is %d" % (port, result))
        #return result
        que.put(result)

    @staticmethod
    def probeAlive(host):
        start = time.time()
        dead = 1
        ports = [21, 22, 23, 25, 53, 80, 88, 110, 111, 135, 137, 138,
                 139, 443, 445, 53, 111, 135, 137, 161, 500, 993, 995,
                 548, 631]
        que = queue.Queue()
        threads = []
        for port in ports:
            x = threading.Thread(target=CheckHostAlive.checkAlive, args=(host, port, que))
            threads.append(x)
            x.start()

        # print("Number of active threads %d" % threading.active_count())

        for thread in threads:
            while not que.empty():
                dead = que.get()
                if dead == 0:
                    #print('Host %s is alive on port %d' % (host,port))
                    #print('Host %s is alive' % (host))
                    dead = 0
                    break
            if dead == 0:
                break
            else:
                thread.join()

        if dead != 0:
            #print('Host %s is dead' % host)
            pass

        end = time.time()
        #print(end - start)
        return dead


if __name__ == "__main__":
    host = '192.168.1.3'
    CheckHostAlive().probeAlive(host)
